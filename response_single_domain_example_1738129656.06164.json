{
  "strategy": "single_domain_example",
  "prompt_prefix": "-- Create Users table\nCREATE TABLE Users (\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    registrationDate DATE NOT NULL,\n    referredBy INT,\n    FOREIGN KEY (referredBy) REFERENCES Users(userID)\n);\n\n-- Create Games table\nCREATE TABLE Games (\n    gameID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title VARCHAR(100) NOT NULL,\n    developer VARCHAR(100) NOT NULL,\n    releaseDate DATE NOT NULL,\n    genre VARCHAR(50) NOT NULL,\n    platform VARCHAR(50) NOT NULL,\n    basePrice DECIMAL(10, 2) NOT NULL\n);\n\n-- Create UserInventory table\nCREATE TABLE UserInventory (\n    inventoryID INTEGER PRIMARY KEY AUTOINCREMENT,\n    userID INT NOT NULL,\n    gameID INT NOT NULL,\n    purchaseDate DATE NOT NULL,\n    tradeValue DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (userID) REFERENCES Users(userID),\n    FOREIGN KEY (gameID) REFERENCES Games(gameID)\n);\n\n-- Create Trades table\nCREATE TABLE Trades (\n    tradeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    offerUserID INT NOT NULL,\n    receiveUserID INT NOT NULL,\n    offerGameID INT NOT NULL,\n    receiveGameID INT NOT NULL,\n    tradeDate DATE NOT NULL,\n    status TEXT CHECK(status IN ('Pending', 'Accepted', 'Rejected')) NOT NULL,\n    FOREIGN KEY (offerUserID) REFERENCES Users(userID),\n    FOREIGN KEY (receiveUserID) REFERENCES Users(userID),\n    FOREIGN KEY (offerGameID) REFERENCES Games(gameID),\n    FOREIGN KEY (receiveGameID) REFERENCES Games(gameID)\n);\n\n-- Create GameBundles table\nCREATE TABLE GameBundles (\n    bundleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    bundleName VARCHAR(100) NOT NULL,\n    description TEXT,\n    discountPercentage DECIMAL(5, 2) NOT NULL\n);\n\n-- Create BundleGames table\nCREATE TABLE BundleGames (\n    bundleItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    bundleID INT NOT NULL,\n    gameID INT NOT NULL,\n    parentBundleItemID INT,\n    FOREIGN KEY (bundleID) REFERENCES GameBundles(bundleID),\n    FOREIGN KEY (gameID) REFERENCES Games(gameID),\n    FOREIGN KEY (parentBundleItemID) REFERENCES BundleGames(bundleItemID)\n);\n Which users have more than one game in their inventory?  \nSELECT u.userID, u.username, COUNT(ui.gameID) as game_count\nFROM Users u\nJOIN UserInventory ui ON u.userID = ui.userID\nGROUP BY u.userID\nHAVING game_count > 1;\n Give me a SQLite SELECT statement that answers the question. Only respond with SQLite syntax. If there is an error, do not explain it!",
  "questionResults": [
    {
      "question": "Which are the most expensive games?",
      "sql": "SELECT title, basePrice\nFROM Games\nORDER BY basePrice DESC\nLIMIT 10;",
      "queryRawResponse": "[('The Last of Us Part II', 59.99), ('Animal Crossing: New Horizons', 59.99), ('Ghost of Tsushima', 59.99), ('Doom Eternal', 59.99), ('Final Fantasy VII Remake', 59.99), (\"Assassin's Creed Valhalla\", 59.99), ('Cyberpunk 2077', 49.99), ('Minecraft', 26.95), ('Hades', 24.99), ('Among Us', 4.99)]",
      "friendlyResponse": "The most expensive games are 'The Last of Us Part II', 'Animal Crossing: New Horizons', 'Ghost of Tsushima', 'Doom Eternal', 'Final Fantasy VII Remake' and \"Assassin's Creed Valhalla\", all priced at $59.99. 'Cyberpunk 2077' is priced at $49.99, 'Minecraft' at $26.95, 'Hades' at $24.99 and 'Among Us' at $4.99.",
      "error": "None"
    },
    {
      "question": "Which users have participated in the most trades?",
      "sql": "SELECT u.userID, u.username, COUNT(t.tradeID) as trade_count\nFROM Users u\nJOIN Trades t ON u.userID = t.offerUserID OR u.userID = t.receiveUserID\nGROUP BY u.userID\nORDER BY trade_count DESC;",
      "queryRawResponse": "[(6, 'sarah_lee', 1), (5, 'david_wilson', 1), (4, 'emily_brown', 1), (3, 'mike_johnson', 1), (2, 'jane_smith', 1), (1, 'john_doe', 1)]",
      "friendlyResponse": "The users who have participated the most in trades are Sarah Lee, David Wilson, Emily Brown, Mike Johnson, Jane Smith, and John Doe, each with one trade.",
      "error": "None"
    },
    {
      "question": "What are the top 3 most common game genres?",
      "sql": "SELECT genre, COUNT(*) as count\nFROM Games\nGROUP BY genre\nORDER BY count DESC\nLIMIT 3;",
      "queryRawResponse": "[('RPG', 2), ('Action-Adventure', 2), ('Simulation', 1)]",
      "friendlyResponse": "The top three most common game genres are RPG and Action-Adventure which are both at the top, followed by Simulation.",
      "error": "None"
    },
    {
      "question": "Which games are included in bundles with a discount greater than 15%?",
      "sql": "SELECT g.gameID, g.title\nFROM Games g\nJOIN BundleGames bg ON g.gameID = bg.gameID\nJOIN GameBundles gb ON bg.bundleID = gb.bundleID\nWHERE gb.discountPercentage > 15;",
      "queryRawResponse": "[(2, 'Cyberpunk 2077'), (7, 'Final Fantasy VII Remake')]",
      "friendlyResponse": "The games that are included in bundles with a discount greater than 15% are Cyberpunk 2077 and Final Fantasy VII Remake.",
      "error": "None"
    },
    {
      "question": "Who are the users that have both offered and received games in trades?",
      "sql": "SELECT DISTINCT u.userID, u.username\nFROM Users u\nJOIN Trades t1 ON u.userID = t1.offerUserID\nJOIN Trades t2 ON u.userID = t2.receiveUserID;",
      "queryRawResponse": "[]",
      "friendlyResponse": "It appears that there are no users who have both offered and received games in trades.",
      "error": "None"
    },
    {
      "question": "What is the average base price of games for each platform?",
      "sql": "SELECT platform, AVG(basePrice) as average_base_price\nFROM Games\nGROUP BY platform;",
      "queryRawResponse": "[('Multi-platform', 37.81666666666667), ('Nintendo Switch', 59.99), ('PlayStation', 59.99)]",
      "friendlyResponse": "The average base price of games is approximately $37.82 for Multi-platform, $59.99 for Nintendo Switch, and $59.99 for PlayStation.",
      "error": "None"
    },
    {
      "question": "Which users have games in their inventory but haven't made any trades?",
      "sql": "SELECT u.userID, u.username\nFROM Users u\nJOIN UserInventory ui ON u.userID = ui.userID\nLEFT JOIN Trades t ON u.userID = t.offerUserID OR u.userID = t.receiveUserID\nWHERE t.tradeID IS NULL;",
      "queryRawResponse": "[]",
      "friendlyResponse": "There are no users that have games in their inventory but haven't made any trades.",
      "error": "None"
    },
    {
      "question": "What is the total value of each user's inventory based on the current trade values?",
      "sql": "SELECT u.userID, u.username, SUM(ui.tradeValue) as total_trade_value\nFROM Users u\nJOIN UserInventory ui ON u.userID = ui.userID\nGROUP BY u.userID;",
      "queryRawResponse": "[(1, 'john_doe', 85), (2, 'jane_smith', 75), (3, 'mike_johnson', 65), (4, 'emily_brown', 85), (5, 'david_wilson', 23)]",
      "friendlyResponse": "The total value of each user's inventory based on the current trade values is as follows: John Doe has a total value of 85, Jane Smith 75, Mike Johnson 65, Emily Brown 85, and David Wilson 23.",
      "error": "None"
    },
    {
      "question": "Who has referred who in the referral program?",
      "sql": "SELECT referrer.username AS Referrer, referred.username AS Referred\nFROM Users referred\nJOIN Users referrer ON referrer.userID = referred.referredBy;",
      "queryRawResponse": "[('john_doe', 'jane_smith'), ('john_doe', 'mike_johnson'), ('jane_smith', 'emily_brown'), ('mike_johnson', 'david_wilson'), ('emily_brown', 'sarah_lee')]",
      "friendlyResponse": "John Doe has referred Jane Smith and Mike Johnson. Jane Smith referred Emily Brown. Mike Johnson referred David Wilson. And Emily Brown referred Sarah Lee.",
      "error": "None"
    }
  ]
}